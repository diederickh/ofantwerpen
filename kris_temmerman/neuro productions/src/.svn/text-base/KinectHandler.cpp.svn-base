//
//  KinectHandler.cpp
//  ofxKinect
//
//  Created by Kris Temmerman on 28/04/11.
//  Copyright 2011 Neuro Productions. All rights reserved.
//

#include "KinectHandler.h"

#import <GLUT/GLUT.h>


enum {
	ATTRIB_VERTEX_FLAT
};



KinectHandler::KinectHandler()
{
   



}
/*
*  constants
*
*/

double KinectHandler::fx_d = 1.0 / 5.9421434211923247e+02;
double KinectHandler::fy_d = 1.0 / 5.9104053696870778e+02;
float KinectHandler::cx_d = 3.3930780975300314e+02;
float KinectHandler::cy_d = 2.4273913761751615e+02;


int KinectHandler::width =640 ;
int KinectHandler::height=480 ;
int KinectHandler::stepSize=10 ;

/*
 *
 *
 */


void KinectHandler::setup()
{
    wait =0;
	kinect.init();
	kinect.setVerbose(true);
	kinect.open();
	
	numKinects = kinect.number_devices;
	
	if(numKinects == 2){
		kinect1.init();
		kinect1.setVerbose(true);
		kinect1.open();
	}
	// zero the tilt on startup ()
	kinect.setCameraTiltAngle(KINECT_START_ANGLE);
	if(numKinects== 2)kinect1.setCameraTiltAngle(KINECT_START_ANGLE);
    
    // set real depth lookup
    calculateLookups();
    
    
    
    
    //prep marching cube points
    int i;
    int j;
    int count=0;
	
   
    blobFinder =new BlobFinder();
   
    stepSize =10;
    sw =width/stepSize;
    sh  = height/stepSize;
    numPoints =sw*sh;

  	points1 =new mcPoint[numPoints]; 
    points2 =new mcPoint[numPoints];

    
    for(i=0;i<sh;i++)
	{
        for (j=0; j<sw;j++) 
        {
            
            //points
            points1[count].y = i*stepSize ;
            points1[count].x = j*stepSize ;
            
            
            points2[count].y = i*stepSize ;
            points2[count].x = j*stepSize ;
            
            
            count++;
            
        }
        
        
	} 
     
    cubes1 =new mcCube[(sw-1) *(sh-1)];
    cubes2 =new mcCube[(sw-1) *(sh-1)];
    count =0;
    count =0;
	for(i=0;i<sh-1;i++)
	{
        for (j=0; j<sw-1;j++) 
        {
            
            
            int pos = i*sw +j;
            cubes1[count].tl = &points1[pos];
            cubes1[count].tr = &points1[pos+1];
            
            cubes1[count].bl = &points1[pos+sw];
            cubes1[count].br = &points1[pos+1+sw];
           
            cubes2[count].tl = &points2[pos];
            cubes2[count].tr = &points2[pos+1];
            
            cubes2[count].bl = &points2[pos+sw];
            cubes2[count].br = &points2[pos+1+sw];
            
            count++;
            
        }
        
        
	}
    kinectShaderProgram =new KinectShaderProgram;
    
    
    rot =0;
    dir = -0.5;
    
    
    numPersons =0;
    
    
    
   
}
void KinectHandler::setPersonHandler(PersonHandler *_personHandler)
{
    personHandler =_personHandler;
    blobFinder->personHandler =personHandler;
    personHandler->triangles = blobFinder->triangles ;
    personHandler->cubes = blobFinder->cubesPos  ;
}



void KinectHandler::update()
{
    
    wait++;
    if(wait%2 != 0)return;
    
    if(wait<80) return;
    kinect.update();
	if(numKinects== 2)kinect1.update();
    if(wait<100) return;
    
    int step =stepSize;
    int numX = width/step;
    int numY = height/step;
    
    int i;
    int j;
   
   
    
    int verticesCount =0;
    if(true)//kinect.isFrameNew())/// geen idee of dit nodig is? of zin heeft , chek kinect code
    {
        
        //background filtering kinnect 1
        
        // filteren kan geoptimaliseerd worden enkel op de step lijnen nodig!!! 
        
        unsigned short *depthPixelsBack1K = kinect.depthPixelsBack;
        int chek2 = 640*step;
      // cout << "\n************************\n";
        for (i=0; i<  307200;i+=step)
        {
            
           /*if(i%step != 0 )continue;  
             if(i%chek2 != 0 )continue;  */
           // cout << i<<" ";
            
            //if( (i-((i% 640)*640))%5 != 0)continue; 
           
           // cout<< (i% 420)<<" "<<i << " ";
            
            depthPixelsBack1[i] = depthPixelsBack1K[i];
        
            float newPos =   distancePixelsLookup[depthPixelsBack1[i]];
            float testDist =50; //newPos/3;
            if(newPos >500){
                depthPixelsVergelijk1[i] =500;
             newPos =0;   
            }
            if(newPos==0){
                
                 depthPixelsBack1[i] =2047;
               
                continue;
            }
            
            if(depthPixelsVergelijk1[i]< newPos || depthPixelsVergelijk1[i] ==0 )
            {
                depthPixelsVergelijk1[i] =newPos;
                depthPixelsBack1[i] =2047;
                continue;
            }
            if(depthPixelsVergelijk1[i]-testDist< newPos )
            {
                
                depthPixelsBack1[i] =2047;
            
            }
            
        }
       
               
         //background filtering kinnect 2
        unsigned short *depthPixelsBack2K = kinect1.depthPixelsBack;
        
        for (i=0; i<  307200;i+=step)
        {
            
          
            
            //if( (i-((i% 640)*640))%5 != 0)continue; 
            
            depthPixelsBack2[i] = depthPixelsBack2K[i];
            float newPos =   distancePixelsLookup[depthPixelsBack2[i]];
            float testDist =100;newPos/3;
            if(newPos >500){
                depthPixelsVergelijk2[i] =500;
                newPos =0;   
            }
            if(newPos==0){
                
                depthPixelsBack2[i] =2047;
                
                continue;
            }
          
            if(depthPixelsVergelijk2[i]< newPos  || depthPixelsVergelijk2[i] ==0)
            {
                depthPixelsVergelijk2[i] =newPos;
                continue;
            }
           
            if(depthPixelsVergelijk2[i]-testDist< newPos )
            {
                
                depthPixelsBack2[i] =2047;
                
            }
           
            
        }
        
        
        glEnable (GL_DEPTH_TEST);
        glDisable(GL_TEXTURE_2D); 
        glViewport(0,0,KINECT_W, KINECT_H);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
        
        kinectShaderProgram->enable();
        kinectShaderProgram-> setMatrix(true );
        if(triangleCount1>0 )kinectShaderProgram->renderData(triangles1,triangleCount1/3);
        
        kinectShaderProgram-> setMatrix(false  );
        if(triangleCount2>0 ) kinectShaderProgram->renderData(triangles2,triangleCount2/3);
        kinectShaderProgram->disable();
        
        /*
         *    prep mc point
         *    
         */
       
        int val1;
        int val2;
        int pointPos;
        int x;
        int y;
        float zw;
        
        for(i=0;i<numPoints;i++)
        {
            x = points1[i].x;
            y = points1[i].y;
            pointPos=y * width + x;
            val1 =depthPixelsBack1[pointPos]; // kinect.getDistanceAt(points[i].x,points[i].y);	
            val2 =depthPixelsBack2[pointPos] ;
            
            // bm1
            if( val1 != 2047)
            {
               
                points1[i].isHit =true;
                
               
                
                zw = distancePixelsLookup [val1];
                points1[i].zReal  =zw; 
                points1[i].xReal = float((x - cx_d) * zw * fx_d);
                points1[i].yReal = float((y - cy_d) * zw * fy_d);
                //if(points1[i].xReal>100)
                //cout<< points1[i].xReal <<" - " << points1[i].yReal<<" - " << points1[i].zReal<<" *"; 
                
                
            }else
            {
                points1[i].isHit =false;
            }
            
            //bm2
            if( val2 != 2047)
            {
                
                points2[i].isHit =true;
                
                
                
                zw = distancePixelsLookup [val2];
                points2[i].zReal  =zw; 
                points2[i].xReal = float((x - cx_d) * zw * fx_d);
                points2[i].yReal = float((y - cy_d) * zw * fy_d);
                
                
            }else
            {
                points2[i].isHit =false;
            }
            
        }
        triangleCount1 =0;
        isKinect1 =true;
        calculateTriangles(  cubes1, points1,depthPixelsBack1);
        
        
        triangleCount2 =0;
        isKinect1 =false;
        calculateTriangles(  cubes2, points2,depthPixelsBack2);
              
    }
   
    
    
    
    

   
   
    
  
   // cout <<"\n triangles:" << triangleCount1 << " " << triangleCount2<<"\n" ;

    kinectShaderProgram->enable();
    kinectShaderProgram-> setMatrix(true );
    if(triangleCount1>0 )kinectShaderProgram->renderData(triangles1,triangleCount1/3);
    
     kinectShaderProgram-> setMatrix(false  );
    if(triangleCount2>0 ) kinectShaderProgram->renderData(triangles2,triangleCount2/3);
kinectShaderProgram->disable();
    
    
    /*   kinectShaderProgram->enable();
    if(triangleCount2>0) kinectShaderProgram->renderData(triangles2,triangleCount2/9);
    kinectShaderProgram->disable();  */
    
    
    
    
  
 
 glUseProgram(0);
 /*
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    //camera 1
    
    ofPushMatrix();
    ofRotateY(-20+rot) ;
     ofTranslate(0,0,0) ;
    float fvViewMatrix[ 16 ];
    glGetFloatv( GL_MODELVIEW_MATRIX, fvViewMatrix );
   
    
    glBegin(GL_TRIANGLES);
    float col =0.5;
    for(i=0;i<triangleCount1;i+=9){
        
        
      col =  triangles1[i+2]/600;
        //  (triangles1[i]+600)/1200
        glColor3f(col,col,col);
        glVertex3f( triangles1[i],  -triangles1[i+1], -triangles1[i+2] );
        
        col =  triangles1[i+5]/600;
       glColor3f(col,col,col);
        glVertex3f( triangles1[i+3],-triangles1[i+4], -triangles1[i+5] );	
        
        col =  triangles1[i+8]/600;
        glColor3f(col,col,col);
        glVertex3f( triangles1[i+6],- triangles1[i+7], -triangles1[i+8]  );			
    }
    glEnd();	
    
    
    
    ofPopMatrix();
    
   
    
    
    //camera 2
   
    
  
  
    ofPushMatrix();
    
    ofRotateY(20+rot) ;
    ofTranslate(-27,0,0) ;
   // glColor3f(1.0, 0, 0);
    
    
    glBegin(GL_TRIANGLES);
    
    for(i=0;i<triangleCount2;i+=9){
        
        col =  triangles2[i+2]/600;
         glColor3f(col,col,col);
        
        glVertex3f(  triangles2[i],  -triangles2[i+1],-triangles2[i+2] );
        
       col = triangles2[i+5]/600;
          glColor3f(col,col,col);
        
        glVertex3f( triangles2[i+3],-triangles2[i+4], -triangles2[i+5] );	
        
        
        col =triangles2[i+8]/600;
        glColor3f(col,col,col);
        
        glVertex3f( triangles2[i+6],- triangles2[i+7],- triangles2[i+8]  );			
    }
    
    glEnd();
    ofPopMatrix();
 */
  
    float data[KINECT_SIZE];
    glReadPixels(0,0,KINECT_W,KINECT_H,GL_RED,GL_FLOAT,data);

   unsigned char  chardata[KINECT_SIZE];
    float  chardata2[KINECT_SIZE];
    for(i =0; i< KINECT_SIZE;i++)
    {
        
       chardata[i] =(unsigned char) (data[i]*255);
         chardata2[i] = (data[i]*255);
    }
 
 if (DEBUG_KRIS)testImage.setFromPixels(chardata,KINECT_W,KINECT_H,OF_IMAGE_GRAYSCALE);
    
   
   blobFinder->update(chardata2);
   
    glDisable (GL_DEPTH_TEST);
 
    

}
void KinectHandler::draw()
{
   
   testImage.draw (0,0,KINECT_W,KINECT_H);
  blobFinder->draw();
    
  /*  glDisable(GL_TEXTURE_2D); 
     glDisable(GL_DEPTH_TEST); 
    kinectShaderProgram->enable();
    
    
    float datar[12];
    datar[0] =0;
    datar[1] =0;
    datar[2]=20;
    
    
    datar[3] =10;
    datar[4] =0;
    datar[5] =20;
    
    
    datar[6] =0;
    datar[7] =10;
    datar[8] =20;
    
    
    datar[9] =10;
    datar[10] =10;
    datar[11] =20;
    
    
    kinectShaderProgram->renderData(datar,4);
    kinectShaderProgram->disable();
    
    glUseProgram(0);*/

}
void KinectHandler::exit()
{

   
	kinect.close();
	
	
	if(numKinects == 2)kinect1.close();

}


/*
 *
 *
 *
 *
 *     utils
 *
 *
 *
 *
 *
 *
 *
 */




void KinectHandler::calculateTriangles(  mcCube *cubes, mcPoint *points, unsigned short  *pixelData)
{
    
 
    
    int numCubes =(sw-1)*(sh-1);
    int i;
    for(i=0;i<numCubes;i++)
    {
              
        mcCube cube =cubes[i];
        int pos=0;
        if(cube.tl->isHit )pos+=1;
        if(cube.tr->isHit )pos+=2;
        if(cube.bl->isHit )pos+=4;
        if(cube.br->isHit )pos+=8;      
        
        if(pos == 0)
        {
            continue;
        }
        mcPoint point1; 
        mcPoint point2 ;
        mcPoint point3 ;
        if(pos == 15)
        {
            
            
            addTriangle(cube.tl,cube.tr,cube.bl);
            addTriangle(cube.tr,cube.br,cube.bl);
        }

       else if(pos == 1)
        {
            
            point1 = getCrossPoint(cube.tl,cube.tr,true,pixelData);
            point2 = getCrossPoint(cube.tl,cube.bl,false,pixelData);
            
            
            addTriangle(&point1,&point2,cube.tl);
        }
       
        else if(pos == 2)
        {
            
            point1 = getCrossPoint(cube.tr,cube.br,false,pixelData);
            point2 = getCrossPoint(cube.tr,cube.tl,true,pixelData);
          
            addTriangle(&point1,&point2,cube.tr);
            
        }
        else if(pos == 3)
        {
            
            point1 = getCrossPoint(cube.tl,cube.bl,false ,pixelData);
            point2 = getCrossPoint(cube.tr,cube.br,false,pixelData );
            
            addTriangle(cube.tl,cube.tr,&point1);
            addTriangle(cube.tr,&point2,&point1);
            
        }
        else if(pos == 4)
        {
            
            point1 = getCrossPoint(cube.bl,cube.tl,false,pixelData);
            point2= getCrossPoint(cube.bl,cube.br,true,pixelData);
           
            addTriangle(&point1,&point2,cube.bl);
            
        }
        else if(pos == 5)
        {
            
            point1 = getCrossPoint(cube.tl,cube.tr,true,pixelData);
            point2 = getCrossPoint(cube.bl,cube.br,true,pixelData);
          
            
            addTriangle(cube.bl,&point1,&point2);
            addTriangle(cube.tl,&point1,cube.bl);
        }
        else if(pos == 8)
        {
            
            point1 = getCrossPoint(cube.br,cube.tr,false,pixelData);
            point2 = getCrossPoint(cube.br,cube.bl,true,pixelData);
          
            addTriangle(&point1, cube.br,&point2);
            
        }
        else if(pos == 7)
        {
            
          
            addTriangle( cube.tl, cube.tr,cube.bl);   
            point1 = getCrossPoint(cube.tr,cube.br,false,pixelData);
            point2 = getCrossPoint(cube.bl,cube.br,true,pixelData);
            
          
            addTriangle(&point1, &point2,cube.tr);
            addTriangle(&point2, cube.bl,cube.tr);        }
        else if(pos == 10)
        {
            
            point1 = getCrossPoint(cube.tr,cube.tl,true,pixelData);
            point2 = getCrossPoint(cube.br,cube.bl,true,pixelData);
         
            addTriangle(&point1,cube.tr ,&point2);
            addTriangle(cube.tr,cube.br,&point2);    
        }
        else if(pos == 7)
        {
            
           
            addTriangle( cube.tl, cube.tr,cube.bl); 
            point1 = getCrossPoint(cube.tr,cube.br,false,pixelData);
            point2 = getCrossPoint(cube.bl,cube.br,true,pixelData);
            
          
            addTriangle(&point1, &point2,cube.tr);
            addTriangle(&point2, cube.bl,cube.tr); 
            
        }   
        else    if(pos == 11)
        {
           
            addTriangle( cube.tl, cube.tr,cube.br); 
            point1 = getCrossPoint(cube.tl,cube.bl,false,pixelData);
            point2 = getCrossPoint(cube.br,cube.bl,true ,pixelData);
          
            addTriangle(&point1,cube.br ,&point2);
            addTriangle(&point1, cube.tl,cube.br);
            
        }
        
        else  if(pos == 12)
        {
            
            
            point2 = getCrossPoint(cube.br,cube.tr,false,pixelData);
            point1 = getCrossPoint(cube.bl,cube.tl,false,pixelData);
            addTriangle(&point1, &point2,cube.bl);
            addTriangle(&point2, cube.br,cube.bl); 
            
        }   
      else  if(pos == 13)
        {
            
          
            addTriangle( cube.br, cube.bl,cube.tl); 
            point1 = getCrossPoint(cube.tl,cube.tr,true,pixelData);
            point2 = getCrossPoint(cube.br,cube.tr,false,pixelData);
            addTriangle(&point1,&point2,cube.br );
            addTriangle(&point1, cube.br,cube.tl);
            
        }
      else  if(pos == 14)
        {
            
           
            addTriangle( cube.bl, cube.tr,cube.br); 
            point1 = getCrossPoint(cube.tr,cube.tl,true,pixelData);
            point2 = getCrossPoint(cube.bl,cube.tl,false,pixelData);
            
           
            
            addTriangle(&point1,cube.bl ,&point2);
            addTriangle(&point1, cube.tr,cube.bl);
        }
      else  if(pos == 6)
      {
          
          point1 = getCrossPoint(cube.tr,cube.tl,true,pixelData);
          point2 = getCrossPoint(cube.bl,cube.tl,false ,pixelData);
          
          
          addTriangle( cube.tr, &point1,cube.bl); 
          addTriangle(  &point1,cube.bl,&point2); 
          
          
          
          
          point1 = getCrossPoint(cube.tr,cube.br,false ,pixelData);
          point2 = getCrossPoint(cube.bl,cube.br,true,pixelData);
          
          
          addTriangle( cube.tr, &point1,cube.bl); 
          addTriangle(  &point1,&point2,cube.bl); 
          
          
      }    else  if(pos == 9)
      {
          
          point1 = getCrossPoint(cube.tl,cube.tr,true,pixelData);
          point2 = getCrossPoint(cube.br,cube.tr,false ,pixelData);
          
          
          addTriangle( cube.tl, &point1,cube.br); 
          addTriangle(  &point1,&point2,cube.br); 
          
          
          
       
          point1 = getCrossPoint(cube.tl,cube.bl,false ,pixelData);
          point2 = getCrossPoint(cube.br,cube.bl,true,pixelData);
          
          
          addTriangle( cube.tl,cube.br, &point1); 
          addTriangle(  &point1,cube.br,&point2); 
          
        
      }
               
    }



}


mcPoint KinectHandler::getCrossPoint(mcPoint *onPoint,mcPoint *ofPoint,bool isHorizontal,unsigned short *depthPixelsBack)
{
  
    mcPoint crossPoint;
    int xPos;
    int yPos;
    
    int step =1;
    xPos = onPoint->x;
    yPos = onPoint->y;
    bool found = false;
    int val;
    int count=0;
    
    if(isHorizontal)
    {
        if( onPoint->x > ofPoint->x) step=-1;
        while(!found)
        {
            count++;
            if(count>stepSize)found =true;
            xPos+=step;
            val =	 depthPixelsBack[yPos * width + xPos];	
           
            if( val==2047)
            {
                xPos-=step;
                val =	 depthPixelsBack[yPos * width + xPos];
                /*float zw = distancePixelsLookup [val];
                crossPoint.zReal  = zw;
                crossPoint.xReal = float((xPos - cx_d) * zw * fx_d);
                crossPoint.yReal = float((yPos - cy_d) * zw * fy_d);*/
                found =true;
            }
            
        }
      

        
        
    }else
    {
        if( onPoint->y > ofPoint->y) step=-1;
        while(!found)
        {
            count++;
            if(count>stepSize)found=true;
            yPos+=step;
             val =	 depthPixelsBack[yPos * width + xPos];	
            if( val ==2047)
            {
                yPos-=step;
                val =	 depthPixelsBack[yPos * width + xPos];
               /*float zw = distancePixelsLookup [val];
                crossPoint.zReal  = zw;
                crossPoint.xReal = float((xPos - cx_d) * zw * fx_d);
                crossPoint.yReal = float((yPos - cy_d) * zw * fy_d);*/
                found =true;
            }
            
            
        }
        
        
    }
    
    
    float zw = distancePixelsLookup [val];
    
    //cout <<zw <<" ->"<<val <<" ";
    crossPoint.zReal  = zw;
    crossPoint.xReal = float((xPos - cx_d) * zw * fx_d);
    crossPoint.yReal = float((yPos - cy_d) * zw * fy_d);
    
    crossPoint.x =xPos;
    crossPoint.y =yPos;
    return crossPoint;
}
void KinectHandler::addTriangle(mcPoint *point1,mcPoint *point2,mcPoint *point3)
{
    
    float  test1= point1->zReal -point2->zReal;
    if(test1 >Z_MARGE || test1 <-Z_MARGE)return;
    //cout << test1 << " ";
     test1= point1->zReal -point3->zReal;
     if(test1 >Z_MARGE || test1 <-Z_MARGE)return;
     //cout << test1 << " ";
     test1= point3->zReal -point2->zReal;
    if(test1 >Z_MARGE || test1 <-Z_MARGE)return;
    // cout << test1 << "\n";
    test1= point1->xReal -point2->xReal;
    if(test1 >XY_MARGE && test1 <-XY_MARGE)return;
    
    test1= point1->xReal -point3->xReal;
    if(test1 >XY_MARGE&& test1 <-XY_MARGE)return;
    
    test1= point3->xReal -point2->xReal;
    if(test1 >XY_MARGE && test1 <-XY_MARGE)return;
    
    test1= point1->yReal -point2->yReal;
    if(test1 >XY_MARGE && test1 <-XY_MARGE)return;
    
    test1= point1->yReal -point3->yReal;
    if(test1 >XY_MARGE && test1 <-XY_MARGE)return;
    
    test1= point3->yReal -point2->yReal;
    if(test1 >XY_MARGE && test1 <-XY_MARGE)return;
    
    
    if(isKinect1){
    
     
      //  if(triangleCount1>3000)return;
        
        
        triangles1[triangleCount1 ] =-point1->xReal;
        triangleCount1++;
        triangles1[triangleCount1 ] = point1->yReal;
        triangleCount1++;
        triangles1[triangleCount1 ] =point1->zReal;
        triangleCount1++;
  
    
        triangles1[triangleCount1 ] = - point2->xReal;
        triangleCount1++;
        triangles1[triangleCount1 ] = point2->yReal;
        triangleCount1++;
        triangles1[triangleCount1 ] =  point2->zReal;
        triangleCount1++;
    
    
        triangles1[triangleCount1 ] =  -point3->xReal;
        triangleCount1++;
        triangles1[triangleCount1 ] =point3->yReal;
        triangleCount1++;
        triangles1[triangleCount1 ] = point3->zReal;
        triangleCount1++;
    }
    else
    {
        
      // if(triangleCount2>3000)return;
       
        triangles2[triangleCount2 ] = point1->xReal;

        
        triangleCount2++;
        triangles2[triangleCount2 ] = point1->yReal;
      

        triangleCount2++;
        triangles2[triangleCount2 ] = point1->zReal;
      

        triangleCount2++;
        
        
        triangles2[triangleCount2 ] = point2->xReal;
      

        triangleCount2++;
        triangles2[triangleCount2] = point2->yReal;
       

        triangleCount2++;
        triangles2[triangleCount2] =  point2->zReal;
       

        triangleCount2++;
        
        
        triangles2[triangleCount2 ] = point3->xReal;
      

        triangleCount2++;
        triangles2[triangleCount2 ] =  point3->yReal;
        

        triangleCount2++;
        triangles2[triangleCount2 ] = point3->zReal;
      

        triangleCount2++;
    
    
    
    
    }
}

void KinectHandler::calculateLookups() {

    //return;
    float
    k1 = 0.1236,
    k2 = 2842.5,
    k3 = 1.1863,
    k4 = 0.0370;
    
		for(int i = 0; i < 2048; i++){
			if(i == 2047) {
				distancePixelsLookup[i] = 0;
				
			} else {
				distancePixelsLookup[i] =100 * (k1 * tanf(((i) / k2) + k3) - k4);
				
			}
       
		}
  
	


}